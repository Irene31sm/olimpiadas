CREATE DATABASE TRABAJO;
USE TRABAJO;

-- Creación de la tabla Departamento
CREATE TABLE Departamento (
  ID_DEPARTAMENTO CHAR(8) PRIMARY KEY NOT NULL,
  DEPARTAMENTO VARCHAR(50) NOT NULL,
  CAPITAL VARCHAR(50) NOT NULL,
  ESTADO BOOLEAN NOT NULL
)ENGINE=INNODB;

-- Creación de la tabla Provincia
CREATE TABLE Provincia (
  ID_PROVINCIA CHAR(8) PRIMARY KEY NOT NULL,
  PROVINCIA VARCHAR(50) NOT NULL,
  CAPITAL VARCHAR(50) NOT NULL,
  ID_DEPARTAMENTO CHAR(8) NOT NULL,
  ESTADO BOOLEAN NOT NULL,
  FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES Departamento(ID_DEPARTAMENTO)
)ENGINE=INNODB;

-- Creación de la tabla Distrito
CREATE TABLE Distrito (
  ID_DISTRITO CHAR(8) PRIMARY KEY NOT NULL,
  ID_PROVINCIA CHAR(8) NOT NULL,
  ESTADO BOOLEAN NOT NULL,
  FOREIGN KEY (ID_PROVINCIA) REFERENCES Provincia(ID_PROVINCIA)
)ENGINE=INNODB;

-- Creación de la tabla Persona
CREATE TABLE Persona (
  DNI CHAR(8) NOT NULL PRIMARY KEY,
  APEPAT VARCHAR(20) NOT NULL,
  APEMAT VARCHAR(20) NOT NULL,
  NOMBRES VARCHAR(50) NOT NULL,
  SEXO CHAR(1) NOT NULL,
  FECHANAC DATE NULL,
  IDDISTRITO CHAR(8) NOT NULL,
  ANTPENALES VARCHAR(255) NULL,
  DNICADUCIDAD DATE NULL,
  DEFUNCION BOOLEAN NOT NULL,
  HABILITADO BOOLEAN NOT NULL,
  FOREIGN KEY (IDDISTRITO) REFERENCES Distrito(ID_DISTRITO),
  CONSTRAINT SEXO_CK CHECK (SEXO IN ('M','F')),
  CONSTRAINT DNI_CK CHECK (DNI REGEXP '^[0-9]{8}$')
) ENGINE=INNODB;


-- Cración de la tabla Renovación_DNI

CREATE TABLE RENOVACION_DNI(
	ID_SOLICITUD CHAR(8) NOT NULL PRIMARY KEY,
	DNI	CHAR(8) NOT NULL,
	FECHA_SOLICITUD DATE NULL,
	FECHA_EMISION DATE NULL,
	FECHA_CADUCIDAD DATE NULL,
	RECOGIDO BOOLEAN NOT NULL,
	FECHA_RECOJO DATE NULL,
	FOREIGN KEY (DNI) REFERENCES Persona(DNI)
)ENGINE=INNODB;




-- CREACION DE TIPO_ELECCION
CREATE TABLE TIPO_ELECCION(
	ID_TIPO_ELEC CHAR(8) PRIMARY KEY NOT NULL,
	NOM_TIPO_ELEC VARCHAR(50) NOT NULL,
	ESTADO BIT NOT NULL
)ENGINE=INNODB;


-- CREACION DE LA TABLA ELECCION 
CREATE TABLE ELECCION(
	ID_ELECCION CHAR(8) PRIMARY KEY NOT NULL,
	ID_TIPO_ELEC CHAR(8) NOT NULL,
	AÑO DATE NULL,
	FECHA_COMISIO DATE NULL,
	ESTADO BIT NOT NULL,
	FOREIGN KEY(ID_TIPO_ELEC) REFERENCES TIPO_ELECCION(ID_TIPO_ELEC)
)ENGINE=INNODB;

-- CREACION TABLA PADRON_ELECTORAL

CREATE TABLE PADRON_ELECTORAL(
	ID_PADRON CHAR(8) NOT NULL PRIMARY KEY,
	ID_ELECCION CHAR(8) NOT NULL,
	DNI CHAR(8) NOT NULL,
	FOREIGN KEY(ID_ELECCION) REFERENCES ELECCION(ID_ELECCION),
	FOREIGN KEY(DNI) REFERENCES Persona (DNI)
)ENGINE=INNODB;

-- CREACION DE LA TABLA PARTIDO_POLITICO

CREATE TABLE PARTIDO_POLITICO(
	ID_PARTIDOPOL CHAR(8) PRIMARY KEY NOT NULL,
	NOM_PARTIDOPOL VARCHAR(50) NOT NULL,
	NOMCORTO VARCHAR(30) NOT NULL,
	ESTADO BIT NOT NULL
)ENGINE=INNODB;

-- Creación de tabla Candidatos

CREATE TABLE CANDIDATOS(
	ID_CANDIDATO CHAR(8) PRIMARY KEY NOT NULL,
	ID_ELECCION	 CHAR(8) NOT NULL,
	ID_PARTIDOPOL CHAR(8) NOT NULL,
	CANDIDATO CHAR(8) NOT NULL,
	ESTADO BIT NOT NULL,
	FOREIGN KEY(ID_PARTIDOPOL) REFERENCES PARTIDO_POLITICO(ID_PARTIDOPOL),
	FOREIGN KEY(ID_ELECCION) REFERENCES ELECCION(ID_ELECCION),
	FOREIGN KEY(CANDIDATO) REFERENCES Persona(DNI)
)ENGINE=INNODB;


-- CREACION TABLE VOTOS
CREATE TABLE VOTOS(
	ID_VOTO CHAR(8) PRIMARY KEY NOT NULL,
	ID_CANDIDATO CHAR(8) NOT NULL,
	ID_VOTANTE CHAR(8) NOT NULL,
	ESTADO BIT NOT NULL,
	FOREIGN KEY (ID_CANDIDATO) REFERENCES CANDIDATOS(ID_CANDIDATO)
)ENGINE=INNODB;

-- CREACION DE PROCESOS ALMACENADOS PARA RENOVACION_DNI


-- INSERTAR
DELIMITER //

CREATE PROCEDURE SPU_INSERTAR_RENOVACION (
  IN p_ID_SOLICITUD CHAR(8),
  IN p_DNI CHAR(8),
  IN p_FECHA_SOLICITUD DATE,
  IN p_FECHA_EMISION DATE,
  IN p_FECHA_CADUCIDAD DATE,
  IN p_RECOGIDO BOOLEAN,
  IN p_FECHA_RECOJO DATE
)
BEGIN
  DECLARE v_DNICount INT;

  -- Verificar si el DNI existe en la tabla Persona
  SELECT COUNT(*) INTO v_DNICount FROM Persona WHERE DNI = p_DNI;

  IF v_DNICount = 0 THEN
    SELECT 'El DNI no existe en la tabla Persona.';
  ELSE
    -- Insertar el registro en la tabla RENOVACION_DNI
    INSERT INTO RENOVACION_DNI (ID_SOLICITUD, DNI, FECHA_SOLICITUD, FECHA_EMISION, FECHA_CADUCIDAD, RECOGIDO, FECHA_RECOJO)
    VALUES (p_ID_SOLICITUD, p_DNI, p_FECHA_SOLICITUD, p_FECHA_EMISION, p_FECHA_CADUCIDAD, p_RECOGIDO, p_FECHA_RECOJO);
  END IF;
END //

DELIMITER ;

CALL SPU_INSERTAR_RENOVACION('3', '12345678', '2023-01-01', '2023-02-01', '2028-01-01', 1, NULL);
SELECT * FROM RENOVACION_DNI

-- ELIMINAR 
DELIMITER //

CREATE PROCEDURE SPU_ELIMINAR_RENOVACION_DNI(
  IN p_ID_SOLICITUD CHAR(8)
)
BEGIN
  -- Verificar si el registro existe en la tabla RENOVACION_DNI
  IF EXISTS (SELECT 1 FROM RENOVACION_DNI WHERE ID_SOLICITUD = p_ID_SOLICITUD) THEN
    -- Eliminar el registro de la tabla RENOVACION_DNI
    DELETE FROM RENOVACION_DNI WHERE ID_SOLICITUD = p_ID_SOLICITUD;
    SELECT 'Registro eliminado exitosamente.';
  ELSE
    SELECT 'El registro no existe en la tabla RENOVACION_DNI.';
  END IF;
END //

DELIMITER ;

CALL SPU_ELIMINAR_RENOVACION_DNI('1');

SELECT * FROM RENOVACION_DNI;

-- ACTUALIZAR

DELIMITER //

CREATE PROCEDURE SPU_ACTUALIZAR_RENOVACION_DNI (
  IN p_ID_SOLICITUD CHAR(8),
  IN p_DNI CHAR(8),
  IN p_FECHA_EMISION DATE,
  IN p_FECHA_CADUCIDAD DATE,
  IN p_RECOGIDO BOOLEAN,
  IN p_FECHA_RECOJO DATE
)
BEGIN
  -- Verificar si el registro existe en la tabla RENOVACION_DNI
  IF EXISTS (SELECT 1 FROM RENOVACION_DNI WHERE ID_SOLICITUD = p_ID_SOLICITUD) THEN
    -- Actualizar el registro en la tabla RENOVACION_DNI
    UPDATE RENOVACION_DNI
    SET DNI = p_DNI,
        FECHA_EMISION = p_FECHA_EMISION,
        FECHA_CADUCIDAD = p_FECHA_CADUCIDAD,
        RECOGIDO = p_RECOGIDO,
        FECHA_RECOJO = p_FECHA_RECOJO
    WHERE ID_SOLICITUD = p_ID_SOLICITUD;
    SELECT 'Registro actualizado exitosamente.';
  ELSE
    SELECT 'El registro no existe en la tabla RENOVACION_DNI.';
  END IF;
END //

DELIMITER ;


CALL SPU_ACTUALIZAR_RENOVACION_DNI('3','12345678','2023-02-25','2028-01-30',0,NULL)

-- CONSULTAS

DELIMITER //

CREATE PROCEDURE SPU_OBTENER_FILA_RENOVACION(
IN solicitud_id CHAR(8)

)
BEGIN
    SELECT *
    FROM RENOVACION_DNI
    WHERE ID_SOLICITUD = solicitud_id;
END //

DELIMITER ;

CALL SPU_OBTENER_FILA_RENOVACION('3');

DELIMITER //

CREATE PROCEDURE SPU_OBTENER_FECHAS_CADUCADAS_2020()
BEGIN
    DECLARE fechaInicio DATE;
    DECLARE fechaFin DATE;
    
    SET fechaInicio = '2020-01-01';
    SET fechaFin = '2020-12-31';
    
    SELECT *
    FROM RENOVACION_DNI
    WHERE FECHA_CADUCIDAD BETWEEN fechaInicio AND fechaFin;
END //

DELIMITER ;

CALL  SPU_OBTENER_FECHAS_CADUCADAS_2020();


-- CREACIÓN DE PROCESOS ALMACEANDOS PARA CANDIDATOS

-- INSERTAR

DELIMITER //

CREATE PROCEDURE SPU_INSERTAR_CANDIDATO(
    IN p_ID_CANDIDATO CHAR(8),
    IN p_ID_ELECCION CHAR(8),
    IN p_ID_PARTIDOPOL CHAR(8),
    IN p_CANDIDATO CHAR(8),
    IN p_ESTADO BIT
)
BEGIN
    DECLARE v_EXISTE_PARTIDO INT;
    DECLARE v_EXISTE_ELECCION INT;
    DECLARE v_EXISTE_PERSONA INT;
    DECLARE v_EXISTE_CANDIDATO INT;

    -- Verificar si el partido político existe
    SELECT COUNT(*) INTO v_EXISTE_PARTIDO
    FROM PARTIDO_POLITICO
    WHERE ID_PARTIDOPOL = p_ID_PARTIDOPOL;
    
    -- Verificar si la elección existe
    SELECT COUNT(*) INTO v_EXISTE_ELECCION
    FROM ELECCION
    WHERE ID_ELECCION = p_ID_ELECCION;
    
    -- Verificar si la persona existe
    SELECT COUNT(*) INTO v_EXISTE_PERSONA
    FROM Persona
    WHERE DNI = p_CANDIDATO;
    
    -- Verificar si el candidato ya existe en la tabla CANDIDATOS
    SELECT COUNT(*) INTO v_EXISTE_CANDIDATO
    FROM CANDIDATOS
    WHERE CANDIDATO = p_CANDIDATO;
    
    -- Insertar el candidato si todas las verificaciones son correctas
    IF v_EXISTE_PARTIDO = 1 AND v_EXISTE_ELECCION = 1 AND v_EXISTE_PERSONA = 1 AND v_EXISTE_CANDIDATO = 0 THEN
        INSERT INTO CANDIDATOS(ID_CANDIDATO, ID_ELECCION, ID_PARTIDOPOL, CANDIDATO, ESTADO)
        VALUES (p_ID_CANDIDATO, p_ID_ELECCION, p_ID_PARTIDOPOL, p_CANDIDATO, p_ESTADO);
        SELECT 'Candidato insertado correctamente.';
    ELSE
        SELECT 'No se pudo insertar el candidato. Verifique los datos ingresados.';
    END IF;
END //

DELIMITER ;


CALL SPU_INSERTAR_CANDIDATO('2', '1', '1', '12345688', 1);
DROP PROCEDURE SPU_INSERTAR_CANDIDATO
SELECT * FROM candidatos
-- ELIMINAR

DELIMITER //

CREATE PROCEDURE SPU_ELIMINAR_CANDIDATO(
    IN p_ID_CANDIDATO CHAR(8)
)
BEGIN
    -- Verificar si el candidato existe
    IF EXISTS(SELECT * FROM CANDIDATOS WHERE ID_CANDIDATO = p_ID_CANDIDATO) THEN
        DELETE FROM CANDIDATOS WHERE ID_CANDIDATO = p_ID_CANDIDATO;
        SELECT 'Candidato eliminado correctamente.';
    ELSE
        SELECT 'No se encontró el candidato especificado.';
    END IF;
END //

DELIMITER ;

CALL SPU_ELIMINAR_CANDIDATO(2);
SELECT * FROM candidatos
-- ACTUALIZAR 

DELIMITER //

CREATE PROCEDURE SPU_ACTUALIZAR_CANDIDATOS(
    IN p_ID_CANDIDATO CHAR(8),
    IN p_ID_ELECCION CHAR(8),
    IN p_ID_PARTIDOPOL CHAR(8),
    IN p_CANDIDATO CHAR(8),
    IN p_ESTADO BIT
)
BEGIN
    DECLARE v_EXISTE_PARTIDO INT;
    DECLARE v_EXISTE_ELECCION INT;
    DECLARE v_EXISTE_PERSONA INT;

    -- Verificar si el partido político existe
    SELECT COUNT(*) INTO v_EXISTE_PARTIDO
    FROM PARTIDO_POLITICO
    WHERE ID_PARTIDOPOL = p_ID_PARTIDOPOL;
    
    -- Verificar si la elección existe
    SELECT COUNT(*) INTO v_EXISTE_ELECCION
    FROM ELECCION
    WHERE ID_ELECCION = p_ID_ELECCION;
    
    -- Verificar si la persona existe
    SELECT COUNT(*) INTO v_EXISTE_PERSONA
    FROM Persona
    WHERE DNI = p_CANDIDATO;
    
    -- Actualizar el candidato si todas las verificaciones son correctas
    IF v_EXISTE_PARTIDO = 1 AND v_EXISTE_ELECCION = 1 AND v_EXISTE_PERSONA = 1 THEN
        UPDATE CANDIDATOS
        SET ID_ELECCION = p_ID_ELECCION, ID_PARTIDOPOL = p_ID_PARTIDOPOL, CANDIDATO = p_CANDIDATO, ESTADO = p_ESTADO
        WHERE ID_CANDIDATO = p_ID_CANDIDATO;
        SELECT 'Candidato actualizado correctamente.';
    ELSE
        SELECT 'No se pudo actualizar el candidato. Verifique los datos ingresados.';
    END IF;
END //

DELIMITER ;

CALL SPU_ACTUALIZAR_CANDIDATOS('1', '1', '1', '12345678', 0);

SELECT * FROM CANDIDATOS

-- CONSULTAS
DELIMITER //

CREATE PROCEDURE SPU_CONSULTAR_CANDIDATOS(
    IN p_ID_ELECCION CHAR(8)
)
BEGIN
    SELECT c.ID_CANDIDATO, c.CANDIDATO, p.NOMBRES, p.APEPAT, p.APEMAT
    FROM CANDIDATOS c
    INNER JOIN Persona p ON c.CANDIDATO = p.DNI
    WHERE c.ID_ELECCION = p_ID_ELECCION;
END //

DELIMITER ;

CALL SPU_CONSULTAR_CANDIDATOS('1');



DELIMITER //

CREATE PROCEDURE SPU_CONSULTAR_CANDIDATOS_PORPARTIDOSPOL(
    IN p_ID_PARTIDOPOL CHAR(8)
)
BEGIN
    SELECT c.ID_CANDIDATO, c.CANDIDATO, p.NOMBRES, p.APEPAT, p.APEMAT
    FROM CANDIDATOS c
    INNER JOIN Persona p ON c.CANDIDATO = p.DNI
    WHERE c.ID_PARTIDOPOL = p_ID_PARTIDOPOL;
END //

DELIMITER ;

CALL SPU_CONSULTAR_CANDIDATOS_PORPARTIDOSPOL(1);

-- INSERT para la tabla Departamento
INSERT INTO Departamento (ID_DEPARTAMENTO, DEPARTAMENTO, CAPITAL, ESTADO)
VALUES ('1', 'Lima', 'Lima', 1);

-- INSERT para la tabla Provincia
INSERT INTO Provincia (ID_PROVINCIA, PROVINCIA, CAPITAL, ID_DEPARTAMENTO, ESTADO)
VALUES ('1', 'Lima', 'Lima', '1', 1);

-- INSERT para la tabla Distrito
INSERT INTO Distrito (ID_DISTRITO, ID_PROVINCIA, ESTADO)
VALUES ('1', '1', 1);

-- INSERT para la tabla Persona
INSERT INTO Persona (DNI, APEPAT, APEMAT, NOMBRES, SEXO, FECHANAC, IDDISTRITO, ANTPENALES, DNICADUCIDAD, DEFUNCION, HABILITADO)
VALUES ('12345678', 'Pérez', 'Gómez', 'Juan', 'M', '1990-01-01', '1', NULL, '2025-01-01', 0, 1);

-- INSERT para la tabla RENOVACION_DNI
INSERT INTO RENOVACION_DNI (ID_SOLICITUD, DNI, FECHA_SOLICITUD, FECHA_EMISION, FECHA_CADUCIDAD, RECOGIDO, FECHA_RECOJO)
VALUES ('1', '12345678', '2023-01-01', '2023-02-01', '2028-01-01', 0, NULL);

-- INSERT para la tabla TIPO_ELECCION
INSERT INTO TIPO_ELECCION (ID_TIPO_ELEC, NOM_TIPO_ELEC, ESTADO)
VALUES ('1', 'Elecciones Generales', 1);

-- INSERT para la tabla ELECCION
INSERT INTO ELECCION (ID_ELECCION, ID_TIPO_ELEC, AÑO, FECHA_COMISIO, ESTADO)
VALUES ('1', '1', '2022-01-01', '2022-02-01', 1);

-- INSERT para la tabla PADRON_ELECTORAL
INSERT INTO PADRON_ELECTORAL (ID_PADRON, ID_ELECCION, DNI)
VALUES ('1', '1', '12345678');

-- INSERT para la tabla PARTIDO_POLITICO
INSERT INTO PARTIDO_POLITICO (ID_PARTIDOPOL, NOM_PARTIDOPOL, NOMCORTO, ESTADO)
VALUES ('1', 'Partido A', 'PA', 1);

-- INSERT para la tabla CANDIDATOS
INSERT INTO CANDIDATOS (ID_CANDIDATO, ID_ELECCION, ID_PARTIDOPOL, CANDIDATO, ESTADO)
VALUES ('1', '1', '1', '12345678', 1);

-- INSERT para la tabla VOTOS
INSERT INTO VOTOS (ID_VOTO, ID_CANDIDATO, ID_VOTANTE, ESTADO)
VALUES ('1', '1', '12345678', 1);
